namespace :acts_as_qa do
  desc "creates the first set of min max data for when the database is reloaded from scratch."
  task :hit_paths, :root_url, :needs => :environment do |t, args|
    ActiveRecord::Base.establish_connection('development')
    Rake::Task["db:dump"].invoke
    ActiveRecord::Base.establish_connection('acts_as_qa')
    Rake::Task["db:load"].invoke
    ApplicationController.send :include, ActsAsQA
    ApplicationController.hit_path(args[:root_url])
  end
  
  desc "Add parameters for each action"
  task :setup, :controller_name, :needs => :environment do |t, args|
    ApplicationController.send :include, ActsAsQA
    controller_files = args[:controller_name] ? [args[:controller_name], "application_controller.rb"] : ApplicationController.fetch_controllers
    controller_files.each do |file_name|
      unless file_name.match('application_controller')
        add_parameters(file_name)
      else
        add_filter
      end
    end# end of each
    create_new_env
    modify_database
    system("rake db:create RAILS_ENV=acts_as_qa")
    ActiveRecord::Base.establish_connection('acts_as_qa')
    # Rake::Task["db:migrate"].invoke
    puts "========================================================================="
    puts "Modify parameters for each action"
    puts "Modify 'set_current_user_for_qa' filter in application_controller.rb"
    puts "Start the server in 'acts_as_qa' environment"
    puts "Run 'Rake acts_as_qa:hit_paths[http://localhost:3000]'"
    puts "=========================================================================="
  end# end of task
  
  desc "remove parameters at for each action"
  task :remove, :needs => :environment do
    File.delete("#{Rails.root}/db/data.yml") rescue nil
    ApplicationController.send :include, ActsAsQA
    controller_files = ApplicationController.fetch_controllers
    controller_files.each do |file_name|
      unless file_name.match('application_controller')
        remove_parameters(file_name)
      else
        remove_filter
      end
    end# end of each
    remove_env
    remove_from_database
  end# end of task
  
  def create_new_env
    unless File.exist?("#{Rails.root}/config/environments/acts_as_qa.rb")
      acts_as_qa = File.new("#{Rails.root}/config/environments/acts_as_qa.rb",  "w")
      content = ""
      File.open("#{Rails.root}/config/environments/development.rb", 'r') do |f|
        while(line = f.gets)
          content << line        
          content << "\n  config.action_controller.allow_forgery_protection    = false\n" if line.match('.configure')
        end
      end
      File.open("#{Rails.root}/config/environments/acts_as_qa.rb", 'w'){|f| f.write(content)}
      puts "New environment 'acts_as_qa' has been created"
    end
  end

  def remove_env
    File.delete("#{Rails.root}/config/environments/acts_as_qa.rb") rescue nil
  end

  def modify_gemfile
    file = File.expand_path('Gemfile', "#{Rails.root}")
    File.open(file, 'r') do |f|
      lines = f.readlines
      unless lines.join.match('yaml_db')
        content = "\ngem 'yaml_db'\n"
        File.open(file, 'a'){|f| f.write(content)}
        system("bundle install")
      end#end of unless
    end # end of file open
  end
  
  def modify_database
    content=""
    db = YAML.load_file("#{Rails.root}/config/database.yml")
    unless db["acts_as_qa"]
      db["acts_as_qa"] = db["development"].dup
      db["acts_as_qa"]["database"]=db["acts_as_qa"]["database"].split('_')[0..-2].join('_')+'_acts_as_qa'
      File.open("#{Rails.root}/config/database.yml", 'w'){|f| f.write(db.to_yaml)}
    end
  end

  def remove_from_database
    db = YAML.load_file("#{Rails.root}/config/database.yml")
    db.delete("acts_as_qa")
    File.open("#{Rails.root}/config/database.yml", 'w'){|f| f.write(db.to_yaml)}
  end
  
  def add_filter
    file = File.expand_path('application_controller.rb', "#{Rails.root}/app/controllers")
    content = ""
    File.open(file, 'r') do |f|
      lines = f.readlines
      unless lines.join.match('set_current_user_for_qa')
        lines.each do |line|
          content << line if line
          content << "\n  #Generated by acts as qa\n  before_filter :set_current_user_for_qa\n\n  def set_current_user_for_qa\n    if Rails.env=='acts_as_qa'\n      #session[:user_id]='1'\n    end\n  end\n\n" if line.include?('ApplicationController')
        end # end of each
        File.open(file, 'w'){|f| f.write(content)}
      end#end of unless
    end # end of file open
  end

  def remove_filter
    file = File.expand_path('application_controller.rb', "#{Rails.root}/app/controllers")
    content = ""
    flag=false
    File.open(file, 'r') do |f|
      while(line = f.gets)
        if line.match('def set_current_user_for_qa')
          flag=true
        end
        content << line unless flag or line.match('before_filter :set_current_user_for_qa') or line.match('acts as qa')
        if flag and line.match(/^  end/)
          flag = false
        end
      end # end of while
    end # end of file open
    File.open(file, 'w'){|f| f.write(content)}
  end
  
  def add_parameters(file_name)
    file = File.expand_path(file_name, "#{Rails.root}/app/controllers")
    content = ""
    File.open(file, 'r') do |f|
      controller_name = file_name.split('_controller')[0]
      controller = file_name.split('/').collect{|x| x.split('_').collect{|y| y.capitalize}.join('')}.join('::').split('.')[0]
      model_name = controller_name.split('/').last.singularize
      lines = f.readlines 
      lines.each_index do |i|
        line = lines[i]
        content << line
        if line.include?('def') && !lines[i+1].include?('#QA')
          action = line.split('def').last.split(';').first.strip
          if eval(controller).public_instance_methods.include?(action.to_sym)
            parameters = action.match(/edit|update|destroy|show/) ? ":id => :#{model_name}" : ''
            content << "#{line.split('def')[0]}  #QA #{parameters}\n"
          end
        end
      end # end of each_index
    end # end of file open
    File.open(file, 'w'){|f| f.write(content)}
  end

  def remove_parameters(file_name)
    file = File.expand_path(file_name, "#{Rails.root}/app/controllers")
    content = ""
    File.open(file, 'r') do |f|
      while(line = f.gets)
        content << line unless line.match('#QA')
      end # end of while
    end # end of file open
    File.open(file, 'w'){|f| f.write(content)}
  end
end
