namespace :acts_as_qa do
  desc "creates the first set of min max data for when the database is reloaded from scratch."
  task :hit, :root_url, :needs => :environment do |t, args|
    ApplicationController.send :include, ActsAsQA
    ApplicationController.hit_path(args[:root_url])
  end
  
  desc "Add parameters at for each action"
  task :setup, :needs => :environment do
    ApplicationController.send :include, ActsAsQA
    controller_files = ApplicationController.fetch_controllers
    controller_files.each do |file_name|
      unless file_name.match('application_controller')
        add_parameters(file_name)
      else
        add_filter
      end
    end# end of each
    create_new_env
    modify_database
    puts "==========================================="
    puts "Modify database.yml"
    puts "Modify parameters for each action"
    puts "Modify 'set_current_user_for_qa' filter in application_controller.rb"
    puts "Start the server in 'acts_as_qa' environment"
    puts "Run 'Rake acts_as_qa:hit[http://localhost:3000]'"
    puts "==========================================="
  end# end of task
  
  desc "remove parameters at for each action"
  task :remove, :needs => :environment do
    ApplicationController.send :include, ActsAsQA
    controller_files = ApplicationController.fetch_controllers
    controller_files.each do |file_name|
      unless file_name.match('application_controller')
        remove_parameters(file_name)
      else
        remove_filter
      end
    end# end of each
    remove_env
    remove_from_database
  end# end of task
  
  def create_new_env
    acts_as_qa = File.new("#{Rails.root}/config/environments/acts_as_qa.rb",  "w")
    content = ""
    File.open("#{Rails.root}/config/environments/development.rb", 'r') do |f|
      while(line = f.gets)
        content << line        
        content << "\n  config.action_controller.allow_forgery_protection    = false\n" if line.match('.configure')
      end
    end
    File.open("#{Rails.root}/config/environments/acts_as_qa.rb", 'w'){|f| f.write(content)}
    puts "New environment 'acts_as_qa' has been created"
  end

  def remove_env
    File.delete("#{Rails.root}/config/environments/acts_as_qa.rb") rescue nil
  end
  
  def modify_database
    content = "\n\n#generated by acts as qa\n#this should be in last\nacts_as_qa: \n  <<: *defaults"
    File.open("#{Rails.root}/config/database.yml", 'a'){|f| f.write(content)}
  end

  def remove_from_database
    file = File.expand_path('database.yml', "#{Rails.root}/config")
    content = ""
    File.open(file, 'r') do |f|
      flag=false
      while(line = f.gets)
        flag = true if line.match("acts as qa")
        content << line unless flag
      end # end of while
    end # end of file open
    File.open(file, 'w'){|f| f.write(content)}
  end
  
  def add_filter
    file = File.expand_path('application_controller.rb', "#{Rails.root}/app/controllers")
    content = ""
    File.open(file, 'r') do |f|
      while(line = f.gets)
        content << line
        content << "\n  #Generated by acts as qa\n  before_filter :set_current_user_for_qa\n\n  def set_current_user_for_qa\n    if Rails.env=='acts_as_qa'\n      #session[:user_id]='1'\n    end\n  end\n\n" if line.include?('ApplicationController')
      end # end of while
    end # end of file open
    File.open(file, 'w'){|f| f.write(content)}
  end

  def remove_filter
    file = File.expand_path('application_controller.rb', "#{Rails.root}/app/controllers")
    content = ""
    flag=false
    File.open(file, 'r') do |f|
      while(line = f.gets)
        if line.match('def set_current_user_for_qa')
          flag=true
        end
        content << line unless flag or line.match('before_filter :set_current_user_for_qa') or line.match('acts as qa')
        if flag and line.match(/^  end/)
          flag = false
        end
      end # end of while
    end # end of file open
    File.open(file, 'w'){|f| f.write(content)}
  end
  
  def add_parameters(file_name)
    file = File.expand_path(file_name, "#{Rails.root}/app/controllers")
    content = ""
    File.open(file, 'r') do |f|
      controller_name = file_name.split('_controller')[0]
      controller = file_name.split('/').collect{|x| x.split('_').collect{|y| y.capitalize}.join('')}.join('::').split('.')[0]
      model_name = controller_name.split('/').last.split('_').collect{|x| x.capitalize!}.join('').singularize
      while(line = f.gets)
        content << line unless line.match('#QA')
        if line.include?('def')
          action = line.split('def').last.split(';').first.strip
          if eval(controller).public_instance_methods.include?(action.to_sym)
            parameters = action.match(/edit|update|destroy|show/) ? ":id => #{model_name}.last.id" : ''
            content << "#{line.split('def')[0]}  #QA #{parameters}\n"
          end
        end
      end # end of while
    end # end of file open
    File.open(file, 'w'){|f| f.write(content)}
  end

  def remove_parameters(file_name)
    file = File.expand_path(file_name, "#{Rails.root}/app/controllers")
    content = ""
    File.open(file, 'r') do |f|
      while(line = f.gets)
        content << line unless line.match('#QA')
      end # end of while
    end # end of file open
    File.open(file, 'w'){|f| f.write(content)}
  end
end
